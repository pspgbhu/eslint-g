#!/usr/bin/env node

const exec = require('child_process').exec;
const fs = require('fs');
const path = require('path');
const program = require('commander');
const colors = require('colors');
const ora = require('ora');
const browserrc = require('../rc/browserrc');
const noderc = require('../rc/noderc');
const vuerc = require('../rc/vuerc');
const reactrc = require('../rc/reactrc');

let way = 'npm';
let rc = noderc;

program
  .version(require('../package.json').version)
  .option('-r, --rule [rule]', 'rules of eslint')
  .option('-i, --install [npm | yarn | cnpm]', 'the installer to install eslint plugins')
  .parse(process.argv);


console.log(program.rule);
if (program.rule) {
  switch (program.rule) {
    case 'b':
    case 'browser':
      rc = browserrc;
      break;
    case 'r':
    case 'react':
      rc = reactrc;
      break;
    case 'v':
    case 'vue':
      rc = vuerc;
      break;
    case 'n':
    case 'node':
    default:
      rc = noderc;
      break;
  }
}


if (program.install) {
  switch (program.install) {
    case 'yarn':
      way = 'yarn';
      break;
    case 'cnpm':
      way = 'cnpm';
      break ;
    case 'npm':
    default:
      break;
  }
}

console.log(rc);
install(rc, way);

function install(_rc, _way) {
  if (['npm', 'yarn', 'cnpm'].indexOf(_way) < 0) {
    _way = 'npm';
  }

  writeFile(_rc.rc)
    .then(() =>  { installPlugins(_rc.plugins, _way) })
    .catch(e => {
      console.log(e);
    });
}


function writeFile(content) {
  return new Promise((resolve, reject) => {
    fs.writeFile(path.resolve() + '/.eslintrc.json', content, (e) => {
      if (e) {
        reject(e);
      }
      console.log(' ');
      console.log('Generate .eslintrc.json file success!'.green);
      console.log(' ');
      resolve();
    });
  });
}


function installPlugins(plugins, _way) {
  var spinner = ora('Downloading eslint plugins');
  spinner.start();
  const ways = {
    npm() {
      exec('npm i -D ' + plugins.join(' '), callback);
    },

    cnpm() {
      exec('cnpm i -D ' + plugins.join(' '), callback);
    },

    yarn() {
      exec('yarn add ' + plugins.join(' '), callback);
    },
  };

  try {
    ways[_way]();
  } catch (error) {
    spinner.stop();
    console.log(error);
  }

  function callback(err, stdout, stderr) {
    spinner.stop();
    if (err) { console.log(err); }
    console.log(stdout);
    if (stderr) { console.log(stderr); }
  }
}
